'use strict';var _index = require('./index');var _index2 = _interopRequireDefault(_index);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

//describe('>>>TILE REDUCER', () => {
//
//  it('initializes an issue', () => {
//    const stateBefore = {};
//    const stateAfter = {
//      tile: {
//        issueId: '',
//        title:'',
//        description:'',
//        author:'',
//        assignee: ''
//      }
//    };
//
//    const action = {type: 'UPDATE_ISSUE'};
//
//    expect(rootReducer(stateBefore, action)).toEqual(stateAfter);
//  });
//
//  it('updates an issue', () => {
//    const stateBefore = {
//      tile: {
//        issueId: '123',
//        title:'',
//        description:'',
//        author:'',
//        assignee: ''
//      }
//    };
//    const stateAfter = {
//      tile: {
//        issueId: '123',
//        title:'testTitle',
//        description:'',
//        author:'',
//        assignee: ''
//      }
//    };
//    const action = { type: 'UPDATE_ISSUE', issueObj: { title: 'testTitle'}};
//
//    expect(rootReducer(stateBefore, action)).toEqual(stateAfter);
//
//  })
//
//
//});
//
//describe('>>>PHASE REDUCER', ()=>{
//  it('creates a new issue', () => {
//    const stateBefore = {
//      column: []
//    }
//    const stateAfter = {
//      column: [
//        {
//          issueId: '',
//          title:'',
//          description:'',
//          author:'',
//          assignee: ''
//        }
//      ]
//    };
//    const action = {type: 'CREATE_ISSUE'};
//
//    expect(rootReducer(stateBefore, action)).toEqual(stateAfter);
//
//  });
//  it('deletes an issue', () => {
//    const stateBefore = {
//      column: [
//        {
//          issueId: '123',
//          title:'',
//          description:'',
//          author:'',
//          assignee: ''
//        },
//        {
//          issueId: '456',
//          title:'',
//          description:'',
//          author:'',
//          assignee: ''
//        },
//        {
//          issueId: '789',
//          title:'',
//          description:'',
//          author:'',
//          assignee: ''
//        }
//      ]
//    };
//    const stateAfter = {
//      column: [
//        {
//          issueId: '123',
//          title:'',
//          description:'',
//          author:'',
//          assignee: ''
//        },
//        {
//          issueId: '789',
//          title:'',
//          description:'',
//          author:'',
//          assignee: ''
//        }
//      ]
//    };
//    const action = {type: 'DELETE_ISSUE', issueId: '456'};
//
//    expect(rootReducer(stateBefore, action)).toEqual(stateAfter);
//  });
//  it('inserts an issue', () => {
//    const io = {
//      issueId: '456',
//      title:'',
//      description:'',
//      author:'',
//      assignee: ''
//    };
//    const stateBefore = {
//      column: [
//        {
//          issueId: '123',
//          title:'',
//          description:'',
//          author:'',
//          assignee: ''
//        },
//        {
//          issueId: '789',
//          title:'',
//          description:'',
//          author:'',
//          assignee: ''
//        }
//      ]
//    };
//    const stateAfter = {
//      column: [
//        {
//          issueId: '123',
//          title:'',
//          description:'',
//          author:'',
//          assignee: ''
//        },
//        {
//          issueId: '456',
//          title:'',
//          description:'',
//          author:'',
//          assignee: ''
//        },
//        {
//          issueId: '789',
//          title:'',
//          description:'',
//          author:'',
//          assignee: ''
//        }
//      ]
//    };
//    const action = {type: 'INSERT_ISSUE', issueId: '789', issueObj: io};
//    expect(rootReducer(stateBefore, action)).toEqual(stateAfter);
//  });
//})
//
describe('>>>BOARD REDUCER', () => {
  it('creates a phase from nothing', () => {
    const stateBefore = {};
    const stateAfter = {
      board: {
        'todo': [] } };


    const action = { type: 'CREATE_PHASE', phase: 'todo' };
    expect((0, _index2.default)(stateBefore, action)).toEqual(stateAfter);
  });
  it('adds a phase', () => {
    const stateBefore = {
      board: {
        'todo': [] } };


    const stateAfter = {
      board: {
        'todo': [],
        'doin': [] } };


    const action = { type: 'CREATE_PHASE', phase: 'doin' };
    expect((0, _index2.default)(stateBefore, action)).toEqual(stateAfter);
  });
  it('deletes an issue', () => {
    const stateBefore = {
      board: {
        'todo': [
        {
          issueId: '123',
          title: '',
          description: '',
          author: '',
          assignee: '' }] } };




    const stateAfter = {
      board: {
        'todo': [] } };


    const action = { type: 'DELETE_ISSUE', issueId: '123' };
    expect((0, _index2.default)(stateBefore, action)).toEqual(stateAfter);
  });
  it('creates an issue in an existing phase', () => {
    const stateBefore = {
      board: {
        'todo': [
        {
          issueId: '123',
          title: '',
          description: '',
          author: '',
          assignee: '' }] } };




    const stateAfter = {
      board: {
        'todo': [
        {
          issueId: '789',
          title: '',
          description: '',
          author: '',
          assignee: '' },

        {
          issueId: '123',
          title: '',
          description: '',
          author: '',
          assignee: '' }] } };




    const newIssue = {
      issueId: '789',
      title: '',
      description: '',
      author: '',
      assignee: '' };

    const action = { type: 'CREATE_ISSUE', phase: 'todo', issueObj: newIssue };
    expect((0, _index2.default)(stateBefore, action)).toEqual(stateAfter);
  });
  it('updates an existing issue', () => {
    const stateBefore = {
      board: {
        'todo': [
        {
          issueId: '123',
          title: '',
          description: '',
          author: '~ted',
          assignee: '' }] } };




    const stateAfter = {
      board: {
        'todo': [
        {
          issueId: '123',
          title: 'a new title',
          description: '',
          author: '~ted',
          assignee: '' }] } };




    const action = { type: 'UPDATE_ISSUE', issueId: '123', issueObj: issueObj };
    expect((0, _index2.default)(stateBefore, action)).toEqual(stateAfter);
  });
  it('moves issues', () => {
    const stateBefore = {
      board: {
        'todo': [
        {
          issueId: '123',
          title: '',
          description: '',
          author: '',
          assignee: '' },

        {
          issueId: '789',
          title: '',
          description: '',
          author: '',
          assignee: '' }],


        'doin': [
        {
          issueId: '489',
          title: '',
          description: '',
          author: '',
          assignee: '' },

        {
          issueId: '989',
          title: '',
          description: '',
          author: '',
          assignee: '' }] } };




    const stateAfter = {
      board: {
        'todo': [
        {
          issueId: '123',
          title: '',
          description: '',
          author: '',
          assignee: '' }],


        'doin': [
        {
          issueId: '489',
          title: '',
          description: '',
          author: '',
          assignee: '' },

        {
          issueId: '789',
          title: '',
          description: '',
          author: '',
          assignee: '' },

        {
          issueId: '989',
          title: '',
          description: '',
          author: '',
          assignee: '' }] } };




    const action = {
      type: 'MOVE_ISSUE',
      sourcePhase: 'todo',
      sourceId: '789',
      targetPhase: 'doin',
      targetId: '989' };

    expect((0, _index2.default)(stateBefore, action)).toEqual(stateAfter);
  });
});